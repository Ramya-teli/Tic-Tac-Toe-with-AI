# -*- coding: utf-8 -*-
"""Tic-Tac-Toe with AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mACK7JxUPVFn9Y8YheiqfanT70O1CzZ0
"""

import random

# Initialize the board size (5x5 grid)
board_size = 5
win_length = 4

# Initialize the board with empty spaces
board = [[' ' for _ in range(board_size)] for _ in range(board_size)]

# Print the current board
def print_board():
    for row in board:
        print(' | '.join(row))
        print('-' * (board_size * 4 - 1))

# Check if the current player has won the game
def check_winner(player):
    # Check rows, columns, and diagonals for a winning condition
    for row in range(board_size):
        for col in range(board_size):
            if col + win_length <= board_size:
                if all(board[row][col + i] == player for i in range(win_length)):
                    return True
            if row + win_length <= board_size:
                if all(board[row + i][col] == player for i in range(win_length)):
                    return True
            if row + win_length <= board_size and col + win_length <= board_size:
                if all(board[row + i][col + i] == player for i in range(win_length)):
                    return True
            if row - win_length >= -1 and col + win_length <= board_size:
                if all(board[row - i][col + i] == player for i in range(win_length)):
                    return True
    return False

# Check if the board is full (no empty spaces)
def is_full():
    for row in board:
        if ' ' in row:
            return False
    return True

# Minimax algorithm to evaluate the board and return the best move for AI
def minimax(depth, maximizing_player):
    if check_winner('O'):
        return 10 - depth
    if check_winner('X'):
        return depth - 10
    if is_full():
        return 0

    if maximizing_player:
        best_value = -float('inf')
        for row in range(board_size):
            for col in range(board_size):
                if board[row][col] == ' ':
                    board[row][col] = 'O'
                    value = minimax(depth + 1, False)
                    best_value = max(best_value, value)
                    board[row][col] = ' '
        return best_value
    else:
        best_value = float('inf')
        for row in range(board_size):
            for col in range(board_size):
                if board[row][col] == ' ':
                    board[row][col] = 'X'
                    value = minimax(depth + 1, True)
                    best_value = min(best_value, value)
                    board[row][col] = ' '
        return best_value

# AI move using Minimax
def ai_move():
    best_value = -float('inf')
    best_move = None
    for row in range(board_size):
        for col in range(board_size):
            if board[row][col] == ' ':
                board[row][col] = 'O'
                move_value = minimax(0, False)
                if move_value > best_value:
                    best_value = move_value
                    best_move = (row, col)
                board[row][col] = ' '
    row, col = best_move
    board[row][col] = 'O'

# Player move
def player_move():
    while True:
        try:
            row, col = map(int, input("Enter your move (row, col) between 0 and 4: ").split())
            if 0 <= row < board_size and 0 <= col < board_size and board[row][col] == ' ':
                board[row][col] = 'X'
                break
            else:
                print("Invalid move! Try again.")
        except ValueError:
            print("Invalid input! Please enter row and column as integers (row, col).")

# Main game function
def play_game():
    print("Welcome to Tic-Tac-Toe with a Twist (5x5 Grid, Connect 4)!")
    print("You are 'X' and the AI is 'O'.")
    print_board()

    while True:
        # Player's turn
        player_move()
        print_board()

        if check_winner('X'):
            print("Congratulations! You win!")
            break
        elif is_full():
            print("It's a draw!")
            break

        # AI's turn
        ai_move()
        print_board()

        if check_winner('O'):
            print("AI wins! Better luck next time.")
            break
        elif is_full():
            print("It's a draw!")
            break

# Run the game
if __name__ == "__main__":
    play_game()